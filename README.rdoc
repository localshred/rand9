= Marley

*Marley* is minimal blog engine without admin interface written in Sinatra framework (http://sinatra.rubyforge.org).

It has no admin interface for writing posts. Use your favorite text editor to edit plain-text files and synchronize them to server.
Marley uses plain-text files for storing articles and SQLite database for storing comments (set data location in <tt>config.yml</tt>).
It comes with Rake and Capistrano tasks for installing and deploying the application, and for syncing articles from your local machine to the server.

The +master+ branch is bare application, +restafari_org+ branch is what runs @ www.restafari.org.

In case you like to use Marley, you should fork it and then make your own branch for your own styling, so you can <tt>git pull</tt> any future updates from the master and then merge/cherry-pick them into your branch. Marley has support for themes: see +themes+ directory. Just duplicate the +default+ directory and start tweaking. Obviously, do not use the _restafari_ theme for your own blog, please.

== Ingredients

* Sinatra, Rack and Thin
* ActiveRecord and SQLite
* Akismet filtering (see <tt>./vendor/akismetor.rb</tt>)
* YAML configuration
* RDiscount for Markdown --> HTML conversion
* Builder for Atom feed generation
* Rake and Capistrano tasks

== Installation and dependencies

You have to install or update following Rubygems:

    $ sudo gem install sinatra rack thin activerecord sqlite3-ruby rdiscount builder capistrano

Edit this configuration file:

    config/config.example.yml

and save it as <i>config/config.yml</i>.

Install the application with this Rake task:

    $ rake app:install
    
Load this URL in your browser:

    http://localhost:4567

You're done. SRSLY.

== Deployment on server

Ensure that you have correct information in <tt>config/config.yml</tt>. Rename example deploy file to  <tt>config/deploy.rb</tt> and fill in proper information for: _user_, _repository_, _deploy_to_, _app_, _web_, _db_.
Then run:

* <tt>cap deploy:setup</tt>
* <tt>cap deploy:cold</tt>

Normal Capistrano deployment procedures apply (ie. you use <tt>cap deploy</tt> very often).

Of course, you have to ensure that there is at least some content on the server in data directory. See next section!

== Synchronizing content

Marley has no administrative interface for writing articles inside some silly <tt><textarea></tt>. It assumes you like to write in your favorite text editor, using Markdown, previewing on the fly, and just synchronize when you're ready to publish.
  
There are several ways how to do that:

* You can be hardcore and write articles over SSH in Vim directly on the server for "just-in-time-publication" when you hit <tt>:w</tt>

* You can be less glorious, of course, and save your articles to some folder on your disk and <tt>scp</tt>-ing said folder to the server. Or use SFTP? Cyberduck drag & drop? Aaargh, not reccommended unless you _really_ like to see what you're doing, in real time.

* You can implement some sane practice and start versioning your writing with Git. (What else?) This way, you can setup remote repository on your server, just <tt>push</tt>-ing changes whenever you feel like you want to say something in public. A <i>post-commit hook</i> is completely neccessary in this case, of course. (It isn't paramount of convenience having to SSH on your server to run <tt>git pull origin master</tt> in some folder.) See Capistrano task <tt>cap sync:setup:hook</tt> for setting this up.

* When you already use Git, you can push to Github (where else?), and have Github call Marley by it's Post-Receive Hooks (http://github.com/guides/post-receive-hooks). Github then calls Marley's <tt>/sync</tt> and it will <tt>git pull</tt> changes from Github. How is this authenticated? Good question. By setting up a (possibly long and secure) token in the config file. OMG! Could be overheard in the internets! If you're worried or prudent, do not use this. (See Capistrano task <tt>cap sync:setup:github</tt> for adding remote Github repo on the server!)

You can set-up last two options by running Capistrano task <tt>cap sync:setup</tt>. Choose whether you like to upload your local data as a Git repository to the server (and setup post-receive hook in doing so) or you want to clone data from Github repository. You should add a Post-Receive URL in your repo's administration on Github as told by the task when it has runned.

Of course, put other ideas in the Marley Wiki (http://github.com/karmi/marley/wikis)

== Managing spam

Marley displays spam comments on the article page, by default. You can easily mark and delete spam in admin interface, when you prepend article URL with _admin_ -- as in http://localhost:4567/admin/my-slashdotted-article.html. Log in with credentials set in <tt>config.yml</tt>.

In addition, there are Rake and Capistrano tasks for easily destroying spam from command line or a cron job: <tt>rake manage:spam:prune</tt> and <tt>cap manage:spam:prune</tt>. You just lose "false positives" this way. But there aren't much of them with Akismet.

== Todo

* Authenticate Github hook by HTTP-Auth, not token
* Enable commenters edit their comments for 15 minutes after posting (based on cookie)
* Kick Markdown formatting into a Formatter so everyone can use whatever formatter she likes
* Kick articles extraction logic into an Interface so everyone can use whatever data store she likes, not being plain (texter) like me

== Licence

Copyright (c) 2008 Karel Minarik (www.karmi.cz)

Code released under the MIT license, do not reuse graphical assets and styles in the <i>restafari_org</i> branch, please
